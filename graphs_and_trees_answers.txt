EXERCISES
1. What is a binary tree and what makes it unique to other trees?
A tree data structure in which each node has at the most two children, referred to as left child and right child. unique from other trees because it can only have two branches for every node

2. What is a heuristic?
an approach to problem solving where solutions are not expected to produce a perfect or optimal solution. examples are a rule of thumb or an educated guess.

3. What is another problem besides the shortest-path problem that requires the use of heuristics?
A* search

4. What is the difference between a depth-first search and a breadth-first search?
BFS - visits nodes by level exploring every node first before moving on to the next level
DFS - explores as far as it can in a branch before going back for unexplored nodes

5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.
undirected - the edges are ambiguous and doesn't start or end at either node, just connects 
a-cylcic - doesn't form a loop 
unweighted - there's no cost to the edges between nodes 



6. What kind of graph is a binary search tree?
undirected unweighted a-cyclic graph

PROGRAMMING QUESTIONS
1. Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

make a node class and a BST class, then use a breadth based search to search the BST and have a function to add nodes in the tree.


class Node {
  constructor(data, left = null, right = null) {
    this.data = data;
    this.left = left;
    this.right = right;
  }
}

class BST {
  constructor() {
    this.root = null;
  }

  add(data) {
    const node = this.root;
    if(node === null) {
      this.root = new Node(data);
      return
    } else {
      //search function
      const searchTree = function(node) {
        if(data < node.data) {
          if(node.left === null) {
            node.left = new Node(data);
            return;
          } else if (node.left !== null) {
            return searchTree(node.left);
          }
        } else if (data > node.data) {
          if(node.right === null) {
            node.right = new Node(data);
            return;
          }else if(node.right !== null) {
            return searchTree(node.right);
          }
        } else {
          //data is equal and not added to tree
          return null;
        }
      };
      return searchTree(node);
    }
  }
  isPresent(data) {
  let current = this.root;
  while(current) {
    if(data === current.data) {
      return true;
    }
    if(data < current.data) {
      current = current.left;
    } else {
      current = current.right;
    }
  }
  return false;
}
}

const bst = new BST();

bst.add(4);
bst.add(2);
bst.add(6);
bst.add(1);
bst.add(3);
bst.add(5);
bst.add(10);
console.log(bst.isPresent(10));
console.log(bst.isPresent(23));

2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

set up a node and BST class. Inside the BST class write functions that will search the tree to find the common ancestor of two nodes and then travel the edges between those nodes, via the ancestor, and record the length

class Node {
	constructor(data) {
		this.data = data;
		this.left = null;
		this.right = null;
	}
}

class BinarySearchTree {
	constructor() {
		this.root = null;
	}

	findDistanceBetweenTwoNodes(root, n1, n2) {
		var lowestCommonAncestor = this.findCommonAncestor(root, n1, n2);
		var distanceNode1ToRoot = this.countAncestors(lowestCommonAncestor, n1);
		var distanceNode2ToRoot = this.countAncestors(lowestCommonAncestor, n2);
		var distanceRootToAncestor = this.countAncestors(root, lowestCommonAncestor);
		var totalDistance = (distanceNode1ToRoot + distanceNode2ToRoot) - (2 * distanceRootToAncestor);
		return ('The distance between node ' + n1 + ' and node ' + n2 + ' is ' + totalDistance);
	}

	findCommonAncestor(root, n1, n2) {
		if (!root) return;
		var lowestCommonAncestor = root.data;
		if (n1 === lowestCommonAncestor || n2 === lowestCommonAncestor) {
			return lowestCommonAncestor;
		}
		if (n1 < lowestCommonAncestor && n2 < lowestCommonAncestor) {
			return this.findCommonAncestor(root.left, n1, n2);
		}
		if (n1 > lowestCommonAncestor && n2 > lowestCommonAncestor) {
			return this.findCommonAncestor(root.right, n1, n2);
		}
		return lowestCommonAncestor;
	}

	countAncestors(root, data) {
		let thisNode = this.root;
		let nodeCount = 0;
		while (thisNode) {
			if (data === thisNode.data) {
				return nodeCount;
			}
			thisNode = data < thisNode.data ? thisNode.left : thisNode.right;
			nodeCount++;
		}
	}

	getRootNode() {
		return this.root;
	}

	insert(data) {
		var newNode = new Node(data);
		if (this.root === null) {
			this.root = newNode;
			this.length++;
		} else {
			this.insertNode(this.root, newNode);
		}
	}

	insertNode(node, newNode) {
		if (newNode.data < node.data) {
			if (node.left === null) {
				node.left = newNode;
				this.length++;
			} else {
				this.insertNode(node.left, newNode);
			}
		} else {
			if (node.right === null) {
				node.right = newNode;
				this.length++;
			} else {
				this.insertNode(node.right, newNode);
			}
		}
	}
}

var BST = new BinarySearchTree();

BST.insert(8);
BST.insert(10);
BST.insert(3);
BST.insert(14);
BST.insert(6);
BST.insert(1);
BST.insert(13);
BST.insert(7);
BST.insert(4);

var root = BST.getRootNode();
BST.findDistanceBetweenTwoNodes(root, 4, 10); 
BST.findDistanceBetweenTwoNodes(root, 8, 10);
BST.findDistanceBetweenTwoNodes(root, 1, 14)